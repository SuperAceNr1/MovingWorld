buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:' + project.mixinGradleVersion
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

repositories {
    maven {
        name 'spongepowered'
        url 'https://repo.spongepowered.org/maven/'
    }
    maven {
        url = 'http://repo.tridevmc.com/'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'

def branch
if (System.env.BRANCH_NAME) {
    // Jenkins support
    branch = System.env.BRANCH_NAME
    branch = branch.substring(branch.lastIndexOf('/') + 1)
} else {
    branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
}
def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()

version = branch + '-' + modVersion + '.' + commits + (dirty ? '-dirty' : '')
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = project.forgeVersion
    mappings = project.mcpVersion
    runDir = "run"

    def replacementVersion = 'MOD_VERSION = \"' + project.version + '\"'
    replace("MOD_VERSION = \"@MOVINGWORLDVER@\"",
            replacementVersion)
}

mixin {
    add sourceSets.main, "mixins.movingworld.refmap.json"
}

dependencies {
    compile('org.spongepowered:mixin:' + project.mixinVersion) {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    compile 'com.elytradev.concrete:concrete-all:' + project.concreteVersion
    shadow 'com.elytradev.concrete:concrete-all:' + project.concreteVersion
}

shadowJar {
    exclude 'dummyThing'

    relocate 'com.elytradev.concrete', "com.elytradev.movingworld.repackage.com.elytradev.concrete"
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('com.elytradev.concrete:concrete-all'))
    }

    classifier = 'full'
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

build.dependsOn(shadowJar)

jar {
    manifest {
        attributes(
                'MixinConfigs': 'mixins.movingworld.json',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': '0',
                'FMLCorePlugin': 'com.elytradev.movingworld.common.asm.coremod.MovingWorldCoreMod',
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'MovingWorld_at.cfg'
        )
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

idea {
    workspace {
        if (iws != null) {
            iws.withXml { xmlFile ->
                //Please don't kill me for my shitty groovy usage ;-;
                def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

                def minecraftClientDefaults = runManager.configuration.find {
                    it.@name == 'Minecraft Client' && it.@type == 'Application'
                }

                def minecraftServerDefaults = runManager.configuration.find {
                    it.@name == 'Minecraft Server' && it.@type == 'Application'
                }

                def minecraftClientVMArgs = '-Xincgc -Xmx1024M -Xms1024M -Dfml.coreMods.load=com.elytradev.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
                minecraftClientDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                    option(name: 'VM_PARAMETERS', value: minecraftClientVMArgs)
                }

                def minecraftServerVMArgs = '-Xincgc -Dfml.ignoreInvalidMinecraftCertificates=true -Dfml.coreMods.load=com.elytradev.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
                minecraftServerDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                    option(name: 'VM_PARAMETERS', value: minecraftServerVMArgs)
                }
            }
        }
    }
}
